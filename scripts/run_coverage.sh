#!/bin/bash
# „Ç´„Éê„É¨„ÉÉ„Ç∏Ê∏¨ÂÆöÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà
# ‰ΩøÁî®‰æã: ./scripts/run_coverage.sh --target 80

set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
TARGET_COVERAGE=80
COVERAGE_DIR="$PROJECT_ROOT/coverage"
REPORTS_DIR="$COVERAGE_DIR/report"

# „Éë„É©„É°„Éº„ÇøËß£Êûê
while [[ $# -gt 0 ]]; do
    case $1 in
        --target)
            TARGET_COVERAGE="$2"
            shift 2
            ;;
        --help)
            echo "‰ΩøÁî®ÊñπÊ≥ï: $0 [--target „Ç´„Éê„É¨„ÉÉ„Ç∏ÈñæÂÄ§]"
            echo "‰æã: $0 --target 80"
            exit 0
            ;;
        *)
            echo "‰∏çÊòé„Å™„Éë„É©„É°„Éº„Çø: $1"
            exit 1
            ;;
    esac
done

echo "üîç Starting coverage analysis..."
echo "Target coverage: ${TARGET_COVERAGE}%"
echo "Project root: $PROJECT_ROOT"

# „Ç´„Éê„É¨„ÉÉ„Ç∏„Éá„Ç£„É¨„ÇØ„Éà„É™Ê∫ñÂÇô
rm -rf "$COVERAGE_DIR"
mkdir -p "$COVERAGE_DIR" "$REPORTS_DIR"

cd "$PROJECT_ROOT"

# .NET „ÉÜ„Çπ„Éà„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ§úÁ¥¢
TEST_PROJECTS=$(find . -name "*.Tests.csproj" -o -name "*Test.csproj" | head -5)

if [[ -z "$TEST_PROJECTS" ]]; then
    echo "‚ö†Ô∏è  „ÉÜ„Çπ„Éà„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
    echo "‰ª•‰∏ã„ÅÆ„Éë„Çø„Éº„É≥„ÅßÊ§úÁ¥¢„Åó„Åæ„Åó„Åü: *.Tests.csproj, *Test.csproj"
    exit 1
fi

echo "üìã Found test projects:"
echo "$TEST_PROJECTS"

# „ÉÜ„Çπ„ÉàÂÆüË°å„Å®„Ç´„Éê„É¨„ÉÉ„Ç∏ÂèéÈõÜ
echo "üß™ Running tests with coverage collection..."

for project in $TEST_PROJECTS; do
    echo "Testing: $project"
    dotnet test "$project" \
        --configuration Release \
        --collect:"XPlat Code Coverage" \
        --results-directory "$COVERAGE_DIR" \
        --logger "console;verbosity=minimal" || {
            echo "‚ùå Tests failed for $project"
            exit 1
        }
done

# „Ç´„Éê„É¨„ÉÉ„Ç∏„É¨„Éù„Éº„ÉàÂ≠òÂú®Á¢∫Ë™ç
COVERAGE_FILES=$(find "$COVERAGE_DIR" -name "coverage.cobertura.xml" 2>/dev/null)

if [[ -z "$COVERAGE_FILES" ]]; then
    echo "‚ùå „Ç´„Éê„É¨„ÉÉ„Ç∏„Éï„Ç°„Ç§„É´„ÅåÁîüÊàê„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü"
    echo "„Éë„ÉÉ„Ç±„Éº„Ç∏Á¢∫Ë™ç: dotnet add package coverlet.collector"
    exit 1
fi

echo "üìä Found coverage files:"
echo "$COVERAGE_FILES"

# ReportGenerator „ÅßHTML„É¨„Éù„Éº„ÉàÁîüÊàê
echo "üìù Generating HTML coverage report..."

# ReportGenerator „ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´Á¢∫Ë™ç
if ! command -v reportgenerator &> /dev/null; then
    echo "Installing ReportGenerator..."
    dotnet tool install -g dotnet-reportgenerator-globaltool
fi

# „É¨„Éù„Éº„ÉàÁîüÊàê
reportgenerator \
    -reports:"$COVERAGE_DIR/**/coverage.cobertura.xml" \
    -targetdir:"$REPORTS_DIR" \
    -reporttypes:"Html;Cobertura" \
    -verbosity:Warning

# „Ç´„Éê„É¨„ÉÉ„Ç∏ÁµêÊûúËß£Êûê
COVERAGE_XML="$REPORTS_DIR/Cobertura.xml"
if [[ -f "$COVERAGE_XML" ]]; then
    # XML„Åã„Çâ„Ç´„Éê„É¨„ÉÉ„Ç∏ÁéáÊäΩÂá∫ (Python‰ΩøÁî®)
    COVERAGE_RESULT=$(python3 -c "
import xml.etree.ElementTree as ET
try:
    tree = ET.parse('$COVERAGE_XML')
    root = tree.getroot()
    line_rate = float(root.get('line-rate', 0)) * 100
    branch_rate = float(root.get('branch-rate', 0)) * 100
    print(f'{line_rate:.1f}|{branch_rate:.1f}')
except Exception as e:
    print('0.0|0.0')
")
    
    LINE_COVERAGE=$(echo "$COVERAGE_RESULT" | cut -d'|' -f1)
    BRANCH_COVERAGE=$(echo "$COVERAGE_RESULT" | cut -d'|' -f2)
    
    echo ""
    echo "üìä Coverage Results:"
    echo "  Line Coverage:   ${LINE_COVERAGE}%"
    echo "  Branch Coverage: ${BRANCH_COVERAGE}%"
    echo "  Target:          ${TARGET_COVERAGE}%"
    echo ""
    
    # ÈñæÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ
    if (( $(echo "$LINE_COVERAGE >= $TARGET_COVERAGE" | bc -l) )); then
        echo "‚úÖ Coverage target met! (${LINE_COVERAGE}% >= ${TARGET_COVERAGE}%)"
        EXIT_CODE=0
    else
        echo "‚ùå Coverage below target! (${LINE_COVERAGE}% < ${TARGET_COVERAGE}%)"
        EXIT_CODE=1
    fi
    
    echo "üìÇ HTML Report: file://$REPORTS_DIR/index.html"
    
    exit $EXIT_CODE
else
    echo "‚ùå „Ç´„Éê„É¨„ÉÉ„Ç∏„É¨„Éù„Éº„ÉàÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
    exit 1
fi